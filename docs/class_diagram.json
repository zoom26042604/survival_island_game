{
  "classes": [
    {
      "name": "Player",
      "description": "Représente le joueur et ses jauges vitales",
      "attributes": [
        {
          "name": "name",
          "type": "str",
          "visibility": "private",
          "description": "Nom du joueur"
        },
        {
          "name": "thirst",
          "type": "int",
          "visibility": "private",
          "description": "Niveau de soif (0-100, 100 = déshydraté)"
        },
        {
          "name": "energy",
          "type": "int",
          "visibility": "private",
          "description": "Niveau d'énergie (0-100, 0 = épuisé)"
        },
        {
          "name": "days_survived",
          "type": "int",
          "visibility": "private",
          "description": "Nombre de jours survécus"
        },
        {
          "name": "is_alive",
          "type": "bool",
          "visibility": "private",
          "description": "État du joueur (vivant/mort)"
        }
      ],
      "methods": [
        {
          "name": "__init__",
          "parameters": ["name: str"],
          "return_type": "None",
          "visibility": "public",
          "description": "Initialise le joueur avec des jauges par défaut"
        },
        {
          "name": "update_gauges",
          "parameters": ["hunger_change: int", "thirst_change: int", "energy_change: int"],
          "return_type": "None",
          "visibility": "public",
          "description": "Met à jour les jauges du joueur"
        },
        {
          "name": "natural_evolution",
          "parameters": [],
          "return_type": "None",
          "visibility": "public",
          "description": "Évolution naturelle des jauges par jour"
        },
        {
          "name": "check_game_over",
          "parameters": [],
          "return_type": "bool",
          "visibility": "public",
          "description": "Vérifie si le joueur est mort"
        },
        {
          "name": "get_status",
          "parameters": [],
          "return_type": "dict",
          "visibility": "public",
          "description": "Retourne l'état actuel du joueur"
        },
        {
          "name": "_clamp_gauges",
          "parameters": [],
          "return_type": "None",
          "visibility": "private",
          "description": "Maintient les jauges dans les limites 0-100"
        }
      ]
    },
    {
      "name": "Game",
      "description": "Contrôleur principal du jeu, gère la boucle de jeu et la sauvegarde",
      "attributes": [
        {
          "name": "player",
          "type": "Player",
          "visibility": "private",
          "description": "Instance du joueur"
        },
        {
          "name": "is_running",
          "type": "bool",
          "visibility": "private",
          "description": "État du jeu (en cours/arrêté)"
        },
        {
          "name": "game_over_reason",
          "type": "str",
          "visibility": "private",
          "description": "Raison de la fin de partie"
        },
        {
          "name": "event_manager",
          "type": "EventManager",
          "visibility": "private",
          "description": "Gestionnaire des événements"
        },
        {
          "name": "action_manager",
          "type": "ActionManager",
          "visibility": "private",
          "description": "Gestionnaire des actions"
        }
      ],
      "methods": [
        {
          "name": "__init__",
          "parameters": [],
          "return_type": "None",
          "visibility": "public",
          "description": "Initialise le jeu"
        },
        {
          "name": "start_new_game",
          "parameters": ["player_name: str"],
          "return_type": "bool",
          "visibility": "public",
          "description": "Démarre une nouvelle partie"
        },
        {
          "name": "load_game",
          "parameters": ["save_data: dict"],
          "return_type": "bool",
          "visibility": "public",
          "description": "Charge une partie depuis des données"
        },
        {
          "name": "save_game",
          "parameters": ["filepath: str"],
          "return_type": "bool",
          "visibility": "public",
          "description": "Sauvegarde la partie dans un fichier JSON"
        },
        {
          "name": "game_loop",
          "parameters": [],
          "return_type": "str",
          "visibility": "public",
          "description": "Boucle principale du jeu (un jour)"
        },
        {
          "name": "check_victory",
          "parameters": [],
          "return_type": "bool",
          "visibility": "public",
          "description": "Vérifie si le joueur a gagné"
        },
        {
          "name": "end_game",
          "parameters": ["reason: str"],
          "return_type": "None",
          "visibility": "public",
          "description": "Termine la partie"
        }
      ]
    },
    {
      "name": "ActionManager",
      "description": "Gère les actions disponibles pour le joueur",
      "attributes": [
        {
          "name": "actions",
          "type": "Dict[str, Action]",
          "visibility": "private",
          "description": "Dictionnaire des actions disponibles"
        }
      ],
      "methods": [
        {
          "name": "__init__",
          "parameters": [],
          "return_type": "None",
          "visibility": "public",
          "description": "Initialise les actions par défaut"
        },
        {
          "name": "get_available_actions",
          "parameters": ["player: Player"],
          "return_type": "List[Action]",
          "visibility": "public",
          "description": "Retourne les actions disponibles pour le joueur"
        },
        {
          "name": "execute_action",
          "parameters": ["action_name: str", "player: Player"],
          "return_type": "str",
          "visibility": "public",
          "description": "Exécute une action spécifique"
        }
      ]
    }
  ],
  "relationships": [
    {
      "type": "composition",
      "from": "Game",
      "to": "Player",
      "description": "Le jeu contient un joueur"
    },
    {
      "type": "composition",
      "from": "Game",
      "to": "EventManager",
      "description": "Le jeu contient un gestionnaire d'événements"
    },
    {
      "type": "composition",
      "from": "Game",
      "to": "ActionManager",
      "description": "Le jeu contient un gestionnaire d'actions"
    },
    {
      "type": "aggregation",
      "from": "ActionManager",
      "to": "Action",
      "description": "Le gestionnaire d'actions contient des actions"
    }
  ],
  "design_patterns": [
    {
      "pattern": "Singleton",
      "class": "Game",
      "description": "Une seule instance de jeu active"
    },
    {
      "pattern": "Strategy",
      "classes": ["Action", "ActionManager"],
      "description": "Différentes stratégies d'actions"
    }
  ],
  "notes": [
    "Les jauges sont limitées entre 0 et 100",
    "Le jeu se termine si faim ou soif >= 100, ou énergie <= 0",
    "Victoire après 30 jours de survie",
    "Sauvegarde automatique chaque jour",
    "Événements aléatoires avec probabilités définies",
    "Code modulaire et extensible pour ajouts futurs"
  ]
}